// <auto-generated />
using System;
using Data.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Repositories.Migrations
{
    [DbContext(typeof(DndContext))]
    partial class DndContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DndSolution.Application.Models.Models.Character.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterClass")
                        .HasColumnType("integer")
                        .HasColumnName("character_class");

                    b.Property<int>("CharacterRace")
                        .HasColumnType("integer")
                        .HasColumnName("character_race");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.CharacterStats", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer")
                        .HasColumnName("charisma");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer")
                        .HasColumnName("constitution");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer")
                        .HasColumnName("dexterity");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer")
                        .HasColumnName("intelligence");

                    b.Property<int>("Strength")
                        .HasColumnType("integer")
                        .HasColumnName("strength");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer")
                        .HasColumnName("wisdom");

                    b.HasKey("CharacterId")
                        .HasName("pk_character_stats");

                    b.ToTable("character_stats", (string)null);
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.Classes.CharacterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("equipment");

                    b.Property<string>("HitDice")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hit_dice");

                    b.Property<string>("HpAt1stLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hp_at1st_level");

                    b.Property<string>("HpAtHigherLevels")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hp_at_higher_levels");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ProfArmor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_armor");

                    b.Property<string>("ProfSavingThrows")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_saving_throws");

                    b.Property<string>("ProfSkills")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_skills");

                    b.Property<string>("ProfTool")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_tool");

                    b.Property<string>("ProfWeapon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_weapon");

                    b.Property<string>("SpellCastingAbility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("spell_casting_ability");

                    b.HasKey("Id")
                        .HasName("pk_classes");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.Races.Asi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RaceId")
                        .HasColumnType("integer")
                        .HasColumnName("race_id");

                    b.Property<string>("Stat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stat");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_asi");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("ix_asi_race_id");

                    b.ToTable("asi", (string)null);
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.Races.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("age");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("Traits")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("traits");

                    b.Property<string>("Vision")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vision");

                    b.HasKey("Id")
                        .HasName("pk_races");

                    b.ToTable("races", (string)null);
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.Races.Speed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RaceId")
                        .HasColumnType("integer")
                        .HasColumnName("race_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_speed");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("ix_speed_race_id");

                    b.ToTable("speed", (string)null);
                });

            modelBuilder.Entity("DndSolution.Application.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.CharacterStats", b =>
                {
                    b.HasOne("DndSolution.Application.Models.Models.Character.Character", "Character")
                        .WithOne("Stats")
                        .HasForeignKey("DndSolution.Application.Models.Models.CharacterStats", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_stats_characters_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.Races.Asi", b =>
                {
                    b.HasOne("DndSolution.Application.Models.Models.Races.Race", "Race")
                        .WithMany("Asi")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asi_races_race_id");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.Races.Speed", b =>
                {
                    b.HasOne("DndSolution.Application.Models.Models.Races.Race", "Race")
                        .WithMany("Speed")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_speed_races_race_id");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.Character.Character", b =>
                {
                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("DndSolution.Application.Models.Models.Races.Race", b =>
                {
                    b.Navigation("Asi");

                    b.Navigation("Speed");
                });
#pragma warning restore 612, 618
        }
    }
}
