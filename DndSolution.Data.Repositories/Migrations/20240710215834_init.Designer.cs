// <auto-generated />
using System;
using Data.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Repositories.Migrations
{
    [DbContext(typeof(DndContext))]
    [Migration("20240710215834_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Class.CharacterClassEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("equipment");

                    b.Property<string>("HitDice")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hit_dice");

                    b.Property<string>("HpAt1stLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hp_at_1st_level");

                    b.Property<string>("HpAtHigherLevels")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hp_at_high_levels");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ProfArmor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_armor");

                    b.Property<string>("ProfSavingThrows")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_saving_throws");

                    b.Property<string>("ProfSkills")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_skills");

                    b.Property<string>("ProfTool")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_tool");

                    b.Property<string>("ProfWeapon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prof_weapon");

                    b.Property<string>("SpellCastingAbility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("spell_casting_ability");

                    b.HasKey("Id");

                    b.ToTable("class");
                });

            modelBuilder.Entity("Data.Entities.Entities.AsiEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("race_id");

                    b.Property<string>("Stat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stat");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("asi");
                });

            modelBuilder.Entity("Data.Entities.Entities.CharacterEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CharacterClass")
                        .HasColumnType("integer")
                        .HasColumnName("class");

                    b.Property<int>("CharacterRace")
                        .HasColumnType("integer")
                        .HasColumnName("race");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.ToTable("character");
                });

            modelBuilder.Entity("Data.Entities.Entities.CharacterStatsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer")
                        .HasColumnName("charisma");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer")
                        .HasColumnName("constitution");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer")
                        .HasColumnName("dexterity");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer")
                        .HasColumnName("intelligence");

                    b.Property<int>("Strength")
                        .HasColumnType("integer")
                        .HasColumnName("strength");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer")
                        .HasColumnName("wisdom");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("stats");
                });

            modelBuilder.Entity("Data.Entities.Entities.RaceEntity", b =>
                {
                    b.Property<long>("raceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("raceId"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("age");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("Traits")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("traits");

                    b.Property<string>("Vision")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vision");

                    b.HasKey("raceId");

                    b.ToTable("race");
                });

            modelBuilder.Entity("Data.Entities.Entities.SpeedEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("race_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("speed");
                });

            modelBuilder.Entity("Data.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Data.Entities.Entities.AsiEntity", b =>
                {
                    b.HasOne("Data.Entities.Entities.RaceEntity", "Race")
                        .WithMany("Asi")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Data.Entities.Entities.CharacterStatsEntity", b =>
                {
                    b.HasOne("Data.Entities.Entities.CharacterEntity", "Character")
                        .WithOne("Stats")
                        .HasForeignKey("Data.Entities.Entities.CharacterStatsEntity", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Data.Entities.Entities.SpeedEntity", b =>
                {
                    b.HasOne("Data.Entities.Entities.RaceEntity", "Race")
                        .WithMany("Speed")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Data.Entities.Entities.CharacterEntity", b =>
                {
                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Entities.RaceEntity", b =>
                {
                    b.Navigation("Asi");

                    b.Navigation("Speed");
                });
#pragma warning restore 612, 618
        }
    }
}
